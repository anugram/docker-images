---
# tasks file for event-mar24-demo
#
# (c) 2023 Thales Group. All rights reserved.
# Author: Anurag Jain, Developer Advocate, Thales
#

# we will start with cleanup
# start with deleting the CTE for kubernetes related configuration
# Delete the Storage Group
- name: "Get Storage Group ID from Name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ storage_group_name }}"
    resource_type: "csigroup"
  register: storageGroup
  ignore_errors: true

- name: "Delete Storage Group"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ storageGroup['response']['id'] }}"
    resource_type: "csigroup"
  ignore_errors: true

# Delete CSI Policy
- name: "Get CSI Policy from Name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ csi_policy_name }}"
    resource_type: "cte-policy"
  register: csiPolicy
  ignore_errors: true

- name: "Delete CSI Policy"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ csiPolicy['response']['id'] }}"
    resource_type: "cte-policy"
  ignore_errors: true

# Delete Resource Set for CTE
- name: "Get CTE Resource Set from Name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ cte_resource_set_name }}"
    resource_type: "resourceset"
  register: resourceSet
  ignore_errors: true

- name: "Delete CTE Resource Set"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ resourceSet['response']['id'] }}"
    resource_type: "resourceset"
  ignore_errors: true

# Get and delete key
- name: "Get Key ID from its name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ cte_policy_key_name }}"
    resource_type: "keys"
  register: key
  ignore_errors: true

- name: "Delete Key"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ key['response']['id'] }}"
    resource_type: "keys"
  ignore_errors: true

- name: "Get XTS Key ID from its name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ cte_policy_key_name }}_xts"
    resource_type: "keys"
  register: key
  ignore_errors: true

- name: "Delete Key"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ key['response']['id'] }}"
    resource_type: "keys"
  ignore_errors: true

# Next we will be deleting the DPG related configuration
# Delete the profile
- name: "Get Client Profile ID from Name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ dpg_client_profile_name }}"
    resource_type: "client-profiles"
  register: clientProfile
  ignore_errors: true

- name: "Delete Client Profile"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ clientProfile['response']['id'] }}"
    resource_type: "client-profiles"
  ignore_errors: true

# Delete DPG Policy
- name: "Get DPG Policy from Name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ dpg_policy_name }}"
    resource_type: "dpg-policies"
  register: dpgPolicy
  ignore_errors: true

- name: "Delete DPG Policy"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ dpgPolicy['response']['id'] }}"
    resource_type: "dpg-policies"
  ignore_errors: true

# Delete Access Policy
- name: "Get Access Policy from Name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ dpg_access_policy_name }}"
    resource_type: "access-policies"
  register: accessPolicy
  ignore_errors: true

- name: "Delete Access Policy"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ accessPolicy['response']['id'] }}"
    resource_type: "access-policies"
  ignore_errors: true

# Delete UserSet
- name: "Get PlainText UserSet from Name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ dpg_plaintext_user_set_name }}"
    resource_type: "user-sets"
  register: userset_plaintext
  ignore_errors: true

- name: "Delete UserSet"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ userset_plaintext['response']['id'] }}"
    resource_type: "user-sets"
  ignore_errors: true

- name: "Get Masked UserSet from Name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ dpg_masked_user_set_name }}"
    resource_type: "user-sets"
  register: userset_masked
  ignore_errors: true

- name: "Delete UserSet"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ userset_masked['response']['id'] }}"
    resource_type: "user-sets"
  ignore_errors: true

# Delete Protection Policy for employee name
# - name: "Delete Protection Policy for Employee Name"
#   thalesgroup.ciphertrust.cm_resource_delete:
#     localNode: "{{ cm_connection_string }}"
#     key: "{{ dpg_cvv_protection_policy }}"
#     resource_type: "protection-policies"
#   ignore_errors: true
  
# Delete Protection Policy
- name: "Delete Protection Policy"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ dpg_protection_policy }}"
    resource_type: "protection-policies"
  ignore_errors: true

# Delete Character Set
- name: "Get Character Set from Name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ dpg_char_set_name }}"
    resource_type: "character-sets"
  register: charset
  ignore_errors: true

- name: "Delete Character Set"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ charset['response']['id'] }}"
    resource_type: "character-sets"
  ignore_errors: true

# Delete NAE Interface
- name: "Delete Interface"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "nae_all_{{ nae_port_number }}"
    resource_type: "interfaces"
  ignore_errors: true

# Get and delete key
- name: "Get Key ID from its name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ dpg_key_name }}"
    resource_type: "keys"
  register: key
  ignore_errors: true

- name: "Delete Key"
  thalesgroup.ciphertrust.cm_resource_delete:
    localNode: "{{ cm_connection_string }}"
    key: "{{ key['response']['id'] }}"
    resource_type: "keys"
  ignore_errors: true


# Lets start configuring CM for CTE for K8s
- name: "Get user ID from its name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "username"
    query_param_value: "{{ dpg_key_owner_username }}"
    resource_type: "users"
  register: user

- name: "Create Key"
  thalesgroup.ciphertrust.vault_keys2_save:
    op_type: create
    name: "{{ cte_policy_key_name }}"
    algorithm: aes
    size: 256
    undeletable: false
    unexportable: false
    usageMask: 76
    meta:
      ownerId: "{{ user['response']['id'] }}"
      permissions:
        DecryptWithKey:
          - "CTE Clients"
        EncryptWithKey:
          - "CTE Clients"
        ExportKey:
          - "CTE Clients"
        MACVerifyWithKey:
          - "CTE Clients"
        MACWithKey:
          - "CTE Clients"
        ReadKey:
          - "CTE Clients"
        SignVerifyWithKey:
          - "CTE Clients"
        SignWithKey:
          - "CTE Clients"
        UseKey:
          - "CTE Clients"
      cte:
        persistent_on_client: true
        encryption_mode: CBC_CS1
        cte_versioned: false
    xts: true
    localNode: "{{ cm_connection_string }}"
  register: key

- name: "Create CTE ResourceSet"
  thalesgroup.ciphertrust.cte_resource_set:
    op_type: create
    name: "{{ cte_resource_set_name }}"
    type: Directory
    description: "Created via Ansible"
    resources:
      - directory: "/"
        file: "*"
        include_subfolders: true
        hdfs: false
      - directory: "/data"
        file: "*"
        include_subfolders: true
        hdfs: false
      - directory: "/data/cte"
        file: "*"
        include_subfolders: true
        hdfs: false
    localNode: "{{ cm_connection_string }}"
  register: _result_create_rs

- name: "Create CTE CSI Policy"
  thalesgroup.ciphertrust.cte_policy_save:
    op_type: create
    localNode: "{{ cm_connection_string }}"
    name: "{{ csi_policy_name }}"
    description: "Created via Ansible"
    never_deny: false
    policy_type: CSI
    metadata:
      restrict_update: false
    security_rules:
      - action: key_op
        effect: "permit,applykey"
        partial_match: true
      - resource_set_id: "{{ _result_create_rs['response']['id'] }}"
        exclude_resource_set: false
        partial_match: true
        action: all_ops
        effect: "permit,audit,applykey"
    key_rules:
      - key_id: "{{ key['response']['id'] }}"
        resource_set_id: "{{ _result_create_rs['response']['id'] }}"
    data_transform_rules:
      - key_id: "{{ key['response']['id'] }}"
        resource_set_id: "{{ _result_create_rs['response']['id'] }}"
  register: _result_create_csi_policy

- name: "Create CSI Storage Group"
  thalesgroup.ciphertrust.cte_csi_storage_group:
    op_type: create
    name: "{{ storage_group_name }}"
    k8s_namespace: "{{ kubernetes_namespace }}"
    k8s_storage_class: "{{ storage_class_name }}"
    client_profile: DefaultClientProfile
    localNode: "{{ cm_connection_string }}"
  register: _result_create_csi_sg

- name: "Add CTE Policy to the CSI Storage Group"
  thalesgroup.ciphertrust.cte_csi_storage_group:
    op_type: add_guard_point
    id: "{{ _result_create_csi_sg['response']['id'] }}"
    policy_list: 
      - "{{ _result_create_csi_policy['response']['id'] }}"
    localNode: "{{ cm_connection_string }}"
  register: _result_create_csi_sg

- name: "Create Registration Token"
  thalesgroup.ciphertrust.cm_regtoken:
    op_type: create
    ca_id: "{{ ca_id }}"
    label:
      ClientProfile: DefaultClientProfile
    name_prefix: ansible_client
    localNode: "{{ cm_connection_string }}"
  register: _result_create_reg_token

- name: Convert registration token 
  ansible.builtin.shell: echo {{ _result_create_reg_token['response']['data']['token'] }} | base64 -w 0
  register: reg_token_encoded

# Now configure CM for DPG and our APP APIs
# Get the masking format ID for access policy
- name: "Get dynamic masket format ID"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ masking_format_dynamic }}"
    resource_type: "masking-formats"
  register: masking_format_dynamic
  ignore_errors: true

- name: "Get static masket format ID"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ cm_connection_string }}"
    query_param: "name"
    query_param_value: "{{ masking_format_static }}"
    resource_type: "masking-formats"
  register: masking_format_static
  ignore_errors: true

- name: "Create Key"
  thalesgroup.ciphertrust.vault_keys2_save:
    op_type: create
    name: "{{ dpg_key_name }}"
    algorithm: "{{ dpg_key_algo }}"
    size: "{{ dpg_key_size }}"
    usageMask: "{{ dpg_key_usage_mask }}"
    unexportable: false
    undeletable: false
    meta:
      ownerId: "{{ user['response']['id'] }}"
      versionedKey: true
    localNode: "{{ cm_connection_string }}"
  ignore_errors: true

- name: "Create Interface"
  thalesgroup.ciphertrust.interface_save:
    localNode: "{{ cm_connection_string }}"
    op_type: create
    port: "{{ nae_port_number }}"
    auto_gen_ca_id: "{{ ca_id }}"
    auto_registration: true
    allow_unregistered: true
    cert_user_field: CN
    interface_type: nae
    mode: tls-cert-pw-opt
    network_interface: all
    trusted_cas:
      local:
        - "{{ ca_id }}"
  ignore_errors: true

- name: "Create Character Set"
  thalesgroup.ciphertrust.dpg_character_set_save:
    localNode: "{{ cm_connection_string }}"
    op_type: create
    name: "{{ dpg_char_set_name }}"
    range:
      - 0030-0039
      - 0041-005A
      - 0061-007A
    encoding: UTF-8
  register: charset

- name: "User Set for masked info"
  thalesgroup.ciphertrust.dpg_user_set_save:
    localNode: "{{ cm_connection_string }}"
    op_type: "create"
    name: "{{ dpg_masked_user_set_name }}"
    users:
      - operator
  register: user_set_masked

- name: "User Set for plaintext"
  thalesgroup.ciphertrust.dpg_user_set_save:
    localNode: "{{ cm_connection_string }}"
    op_type: "create"
    name: "{{ dpg_plaintext_user_set_name }}"
    users:
      - owner
  register: user_set_plain

- name: "Create Access Policy"
  thalesgroup.ciphertrust.dpg_access_policy_save:
    localNode: "{{ cm_connection_string }}"
    op_type: "create"
    name: "{{ dpg_access_policy_name }}"
    default_reveal_type: "Ciphertext"
    user_set_policy:
      - reveal_type: Plaintext
        user_set_id: "{{ user_set_plain['response']['id'] }}"
      - reveal_type: "Masked Value"
        user_set_id: "{{ user_set_masked['response']['id'] }}"
        masking_format_id: "{{ masking_format_dynamic['response']['id'] }}"
  register: access_policy
  
- name: "Create Protection Policy for non-Card data"
  thalesgroup.ciphertrust.dpg_protection_policy_save:
    localNode: "{{ cm_connection_string }}"
    op_type: create
    access_policy_name: "{{ dpg_access_policy_name }}"
    masking_format_id: "{{ masking_format_static['response']['id'] }}"
    name: "{{ dpg_protection_policy }}"
    key: "{{ dpg_key_name }}"
    tweak: "1628462495815733"
    tweak_algorithm: "SHA1"
    algorithm: "FPE/AES/UNICODE"
    character_set_id: "{{ charset['response']['id'] }}"
  register: protection_policy

# - name: "Create Protection Policy for Card data"
#   thalesgroup.ciphertrust.dpg_protection_policy_save:
#     localNode: "{{ cm_connection_string }}"
#     op_type: create
#     access_policy_name: "{{ dpg_access_policy_name }}"
#     masking_format_id: "{{ masking_format['response']['id'] }}"
#     name: "{{ dpg_cc_protection_policy }}"
#     key: "{{ dpg_key_name }}"
#     tweak: "9828462495846783"
#     tweak_algorithm: "SHA1"
#     algorithm: "FPE/AES/UNICODE"
#   register: protection_policy_cc

- name: "Create DPG Policy"
  thalesgroup.ciphertrust.dpg_policy_save:
    localNode: "{{ cm_connection_string }}"
    op_type: create
    name: "{{  dpg_policy_name }}"
    proxy_config:
      - api_url: "/api/payment-info"
        json_request_post_tokens:
          - name: "cc"
            operation: "protect"
            protection_policy: "{{ dpg_protection_policy }}"
          - name: "cvv"
            operation: "protect"
            protection_policy: "{{ dpg_protection_policy }}"
          - name: "zip"
            operation: "protect"
            protection_policy: "{{ dpg_protection_policy }}"
        json_response_get_tokens:
          - name: "data.[*].cc"
            operation: "reveal"
            protection_policy: "{{ dpg_protection_policy }}"
            access_policy: "{{ dpg_access_policy_name }}"
          - name: "data.[*].cvv"
            operation: "reveal"
            protection_policy: "{{ dpg_protection_policy }}"
            access_policy: "{{ dpg_access_policy_name }}"
          - name: "data.[*].zip"
            operation: "reveal"
            protection_policy: "{{ dpg_protection_policy }}"
            access_policy: "{{ dpg_access_policy_name }}"
      - api_url: "/api/health-info/add"
        json_request_post_tokens:
          - name: "healthCardNum"
            operation: "protect"
            protection_policy: "{{ dpg_protection_policy }}"
          - name: "zip"
            operation: "protect"
            protection_policy: "{{ dpg_protection_policy }}"
      - api_url: "/api/health-info"
        json_response_get_tokens:
          - name: "data.[*].healthCardNum"
            operation: "reveal"
            protection_policy: "{{ dpg_protection_policy }}"
            access_policy: "{{ dpg_access_policy_name }}"
          - name: "data.[*].zip"
            operation: "reveal"
            protection_policy: "{{ dpg_protection_policy }}"
            access_policy: "{{ dpg_access_policy_name }}"
  register: policy

- name: "Create DPG Client Profile"
  thalesgroup.ciphertrust.dpg_client_profile_save:
    name: "{{ dpg_client_profile_name }}"
    op_type: create
    app_connector_type: DPG
    lifetime: 30d
    cert_duration: 730
    max_clients: 200
    ca_id: "{{ ca_id }}"
    nae_iface_port: "{{ nae_port_number }}"
    csr_parameters:
      csr_cn: "{{ dpg_key_owner_username }}"
    policy_id: "{{ policy['response']['id'] }}"    
    configurations:
      auth_method_used:
        scheme_name: Basic
      tls_to_appserver:
        tls_skip_verify: true
        tls_enabled: false
    localNode: "{{ cm_connection_string }}"
  register: profile

# All the work for setting up CSM to work with kubernetes as external secrets store
- name: "Create CSR"
  thalesgroup.ciphertrust.cm_certificate_authority:
    op_type: create-csr-key
    cn: "web.ciphertrustmanager.local"
    algorithm: RSA
    ipAddresses:
      - "{{ cm_ip }}"
    dnsNames:
      - "web.ciphertrustmanager.local"
    size: 2048
    localNode: "{{ cm_connection_string }}"
  register: CSR

- name: "Sign CSR and Issue Certificate from CM Local CA"
  thalesgroup.ciphertrust.cm_certificate_authority:
    op_type: issue-cert
    id: "{{ ca_id }}"
    csr: "{{ CSR['response']['data']['csr'] }}"
    purpose: server
    duration: 365
    name: "akl-server.crt"
    localNode: "{{ cm_connection_string }}"
  register: Certificate

- name: "Upload cert and key on the interface"
  thalesgroup.ciphertrust.interface_actions:
    op_type: put_certificate
    interface_id: web
    certificate: "{{ Certificate['response']['data']['cert'] + CSR['response']['data']['key'] }}"
    generate: false
    format: PEM
    localNode: "{{ cm_connection_string }}"
  register: Interface

- name: "Restart CM Web Service"
  thalesgroup.ciphertrust.cm_services:
    op_type: restart
    services:
      - "web"
    localNode: "{{ cm_connection_string }}"
  register: service

- name: "Wait for 1 minute for service restart"
  pause:
    seconds: 60

- name: "Download CA Bundle for Akelyess integration"
  thalesgroup.ciphertrust.interface_actions:
    op_type: get_certificate
    interface_id: web
    localNode: "{{ cm_connection_string }}"
  register: caBundle

- name: Base64 Encode the Certificate Bundle
  ansible.builtin.shell: echo "{{ caBundle['response']['data']['certificates'] }}" | tr -d '\n' | base64 | tr -d '\n'
  register: cert_encoded

- name: set vars for helm chart values
  set_fact:
    NAMESPACE: "{{ kubernetes_namespace }}"
    REG_TOKEN_ENCODED: "{{ reg_token_encoded['stdout'] }}"
    CM_STORAGE_CLASS: "{{ storage_class_name }}"
    CM_CTE_POLICY: "{{ csi_policy_name }}"
    CM_STORAGE_GROUP: "{{ storage_group_name }}"
    CM_IP: "{{ cm_ip }}"
    NFS_IP: "{{ nfs_ip }}"
    REG_TOKEN: "{{ profile['response']['data']['reg_token'] }}"
    BACKEND_IP: "{{ api_ip }}"
    BACKEND_PORT: "{{ api_port }}"
    AKL_ACCESS_ID: "{{ akl_access_id }}"
    AKL_ACCESS_KEY: "{{ akl_access_key }}"
    AKEYLESS_API_ACCESS_ID: "{{ akl_access_id }}"
    AKEYLESS_API_ACCESS_KEY: "{{ akl_access_key }}"
    CA_BUNDLE: "{{ cert_encoded['stdout'] }}"

- name: "create shell script for creating akeyless Reg Token secrets"
  template:
    src: "akeyless-create-secrets.sh.j2"
    dest: "/tmp/akeyless-create-secrets.sh"

# - name: "create Akelyess Helm chart's values.yaml file"
#   template:
#     src: "akeyless-helm-values.yaml.j2"
#     dest: "/tmp/akeyless-helm-values.yaml"

- name: "create YAML file for akeyless credentials"
  template:
    src: "akeyless-auth-secret.yaml.j2"
    dest: "/tmp/akeyless-auth-secret.yaml"

- name: "create YAML file for creating akeyless secrets store"
  template:
    src: "akl-external-secret-store.yaml.j2"
    dest: "/tmp/akl-external-secret-store.yaml"

- name: "create YAML for creating external secret as CTE registration token"
  template:
    src: "akl-external-secret.yaml.j2"
    dest: "/tmp/akl-external-secret.yaml"

- name: "create namespace YAML file from template"
  template:
    src: "namespace.yaml.j2"
    dest: "/tmp/namespace.yaml"

- name: "create cm_token secrets YAML file from template"
  template:
    src: "cm-token-secret.yaml.j2"
    dest: "/tmp/cm-token-secret.yaml"

- name: "create NFS PV YAML file from template"
  template:
    src: "nfs-pv.yaml.j2"
    dest: "/tmp/nfs-pv.yaml"

- name: "create NFS PVC YAML file from template"
  template:
    src: "nfs-pvc.yaml.j2"
    dest: "/tmp/nfs-pvc.yaml"

- name: "create CTE PVC YAML file from template"
  template:
    src: "cte-pvc.yaml.j2"
    dest: "/tmp/cte-pvc.yaml"

- name: "create Storage Class YAML file from template"
  template:
    src: "storage-class.yaml.j2"
    dest: "/tmp/storage-class.yaml"

- name: "copy values.yaml for API service without DPG to tmp directory"
  template:
    src: "values_api.yaml.j2"
    dest: "/tmp/values_api.yaml"

- name: "copy values.yaml for API service with DPG to tmp directory"
  template:
    src: "values_api_with_dpg.yaml.j2"
    dest: "/tmp/values_api_with_dpg.yaml"

- name: "copy values.yaml for Frontend service to tmp directory"
  template:
    src: "values_ui.yaml.j2"
    dest: "/tmp/values_ui.yaml"

# - name: Create NameSpace first
#   kubernetes.core.k8s:
#     state: present
#     src: "/tmp/namespace.yaml"

# - name: Create Secret
#   kubernetes.core.k8s:
#     state: present
#     src: "/tmp/cm-token-secret.yaml"

# - name: Create Storage Class
#   kubernetes.core.k8s:
#     state: present
#     src: "/tmp/storage-class.yaml"

# - name: Create NFS PV
#   kubernetes.core.k8s:
#     state: present
#     src: "/tmp/nfs-pv.yaml"

# - name: Create NFS PVC
#   kubernetes.core.k8s:
#     state: present
#     src: "/tmp/nfs-pvc.yaml"

# - name: Create CTE PVC
#   kubernetes.core.k8s:
#     state: present
#     src: "/tmp/cte-pvc.yaml"

# - name: Add CDSP Charts repository
#   kubernetes.core.helm_repository:
#     name: cdsp
#     repo_url: https://anugram.github.io/helm-charts/

# - name: Deploy DPG Demo chart using values files in tmp dir
#   kubernetes.core.helm:
#     name: kubecon-demo-api
#     chart_ref: cdsp/demo-cte-dpg-secrets-api
#     release_namespace: "{{ kubernetes_namespace }}"
#     create_namespace: true
#     values_files:
#       - /tmp/values_api.yaml
